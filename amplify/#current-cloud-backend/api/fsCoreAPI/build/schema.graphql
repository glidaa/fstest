type User @aws_iam @aws_cognito_user_pools {
  username: String!
  firstName: String!
  lastName: String!
  email: AWSEmail!
  plan: Plan!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Project @aws_iam @aws_cognito_user_pools {
  id: ID!
  permalink: String!
  rank: Float!
  title: String!
  privacy: ProjectPrivacy!
  permissions: Permissions!
  statusSet: [Status!]!
  defaultStatus: ID!
  totalTasks: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String!
}

type Task @aws_iam @aws_cognito_user_pools {
  id: ID!
  projectId: ID!
  permalink: Int!
  rank: Float!
  task: String
  description: String
  due: AWSDateTime
  tags: [String!]!
  status: ID!
  priority: TaskPriority!
  assignees: [String!]!
  anonymousAssignees: [String!]!
  invitedAssignees: [String!]!
  watchers: [String!]!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Comment @aws_iam @aws_cognito_user_pools {
  id: ID!
  taskId: ID!
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String!
}

type Notification @aws_iam @aws_cognito_user_pools {
  id: ID!
  projectId: ID!
  taskId: ID
  commentId: ID
  action: HistoryAction!
  field: HistoryField!
  value: String
  hint: String
  read: Boolean!
  link: String!
  mutator: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String!
}

type Status @aws_iam @aws_cognito_user_pools {
  id: ID!
  title: String!
  synonym: StatusSynonym!
}

type History @aws_iam @aws_cognito_user_pools {
  id: ID!
  projectId: ID!
  taskId: ID
  commentId: ID
  action: HistoryAction!
  field: HistoryField!
  value: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String!
}

type Mutation {
  pushNotification(input: PushNotificationInput!): Notification! @aws_iam
  pushUserUpdate(input: PushUserUpdateInput!): UserUpdate! @aws_iam
  uploadExternal(url: AWSURL!, taskId: ID!): Empty! @aws_cognito_user_pools
  createProject(input: CreateProjectInput!): CreatedProject @aws_cognito_user_pools
  createTask(input: CreateTaskInput!): CreatedTask @aws_cognito_user_pools
  createComment(input: CreateCommentInput!): CreatedComment @aws_cognito_user_pools
  updateProject(input: UpdateProjectInput!): ProjectUpdate @aws_cognito_user_pools
  updateProjectTitle(input: UpdateProjectTitleInput!): ProjectTitleUpdate @aws_cognito_user_pools
  updateTaskRank(input: UpdateTaskRankInput!): TaskUpdate @aws_cognito_user_pools
  updateTaskTask(input: UpdateTaskTaskInput!): TaskUpdate @aws_cognito_user_pools
  updateTaskDescription(input: UpdateTaskDescriptionInput!): TaskUpdate @aws_cognito_user_pools
  updateTaskDue(input: UpdateTaskDueInput!): TaskUpdate @aws_cognito_user_pools
  updateTaskTags(input: UpdateTaskTagsInput!): TaskUpdate @aws_cognito_user_pools
  updateTaskStatus(input: UpdateTaskStatusInput!): TaskUpdate @aws_cognito_user_pools
  updateTaskPriority(input: UpdateTaskPriorityInput!): TaskUpdate @aws_cognito_user_pools
  updateUser(input: UpdateUserInput!): UserUpdate @aws_cognito_user_pools
  deleteProjectAndTasks(input: DeleteProjectInput!): DeletedProject @aws_cognito_user_pools
  deleteTaskAndComments(input: DeleteTaskInput!): DeletedTask @aws_cognito_user_pools
  deleteComment(input: DeleteCommentInput!): DeletedComment @aws_cognito_user_pools
  dismissNotification(input: DismissNotificationInput!): DeletedNotification @aws_cognito_user_pools
  dismissNotifications: NotificationsList @aws_cognito_user_pools
  addAssignee(input: AddAssigneeInput!): TaskUpdate @aws_cognito_user_pools
  removeAssignee(input: RemoveAssigneeInput!): TaskUpdate @aws_cognito_user_pools
  addAnonymousAssignee(input: AddAssigneeInput!): TaskUpdate @aws_cognito_user_pools
  removeAnonymousAssignee(input: RemoveAssigneeInput!): TaskUpdate @aws_cognito_user_pools
  addInvitedAssignee(input: AddAssigneeInput!): TaskUpdate @aws_cognito_user_pools
  removeInvitedAssignee(input: RemoveAssigneeInput!): TaskUpdate @aws_cognito_user_pools
  addWatcher(input: AddWatcherInput!): TaskUpdate @aws_cognito_user_pools
  removeWatcher(input: RemoveWatcherInput!): TaskUpdate @aws_cognito_user_pools
  importLocalData(input: AWSJSON!): GenericResult @aws_cognito_user_pools
}

type Query {
  searchUserToAssign(searchQuery: String!, taskId: ID!): UsersList @aws_cognito_user_pools
  searchUserToWatch(searchQuery: String!, taskId: ID!): UsersList @aws_cognito_user_pools
  initializeUpload(contentType: String!, taskId: ID!): InitializedUpload @aws_cognito_user_pools
  listOwnedProjects(owner: String): ProjectsList @aws_cognito_user_pools
  listAssignedProjects(assignee: String): ProjectsList @aws_cognito_user_pools
  listWatchedProjects(watcher: String): ProjectsList @aws_cognito_user_pools
  listNotifications: NotificationsList @aws_cognito_user_pools
  getUserByUsername(username: String!): GotUser @aws_cognito_user_pools @aws_iam
  listUsersByUsernames(usernames: [String!]!): UsersList @aws_cognito_user_pools @aws_iam
  listAttachmentsByTaskId(taskId: ID!): AttachmentsList @aws_cognito_user_pools @aws_iam
  getProjectById(projectId: ID!): Project @aws_cognito_user_pools @aws_iam
  getProjectByPermalink(permalink: String!, owner: String!): Project @aws_cognito_user_pools @aws_iam
  listHistoryByTaskId(taskId: ID!): IndividualHistoryList @aws_cognito_user_pools @aws_iam
  listTasksForProject(projectId: ID!): TasksList @aws_cognito_user_pools @aws_iam
  listCommentsForTask(taskId: ID!): CommentsList @aws_cognito_user_pools @aws_iam
}

type Subscription {
  onPushNotification(owner: String!): Notification @aws_subscribe(mutations: ["pushNotification"]) @aws_cognito_user_pools
  onPushUserUpdate(username: String!): UserUpdate @aws_subscribe(mutations: ["pushUserUpdate"]) @aws_cognito_user_pools
  onDismissNotification(owner: String!): DeletedNotification @aws_subscribe(mutations: ["dismissNotification"]) @aws_cognito_user_pools
  onCreateOwnedProject(owner: String!): CreatedProject @aws_subscribe(mutations: ["createProject"]) @aws_cognito_user_pools
  onUpdateOwnedProject(owner: String!): ProjectUpdate @aws_subscribe(mutations: ["updateProject"]) @aws_cognito_user_pools
  onDeleteOwnedProject(owner: String!): DeletedProject @aws_subscribe(mutations: ["deleteProjectAndTasks"]) @aws_cognito_user_pools
  onUpdateProject(id: String!): ProjectUpdate @aws_subscribe(mutations: ["updateProject"]) @aws_cognito_user_pools @aws_iam
  onDeleteProject(id: String!): DeletedProject @aws_subscribe(mutations: ["deleteProjectAndTasks"]) @aws_cognito_user_pools @aws_iam
  onCreateTaskByProjectId(projectId: ID!): CreatedTask @aws_subscribe(mutations: ["createTask"]) @aws_cognito_user_pools @aws_iam
  onUpdateTaskByProjectId(projectId: ID!): TaskUpdate @aws_subscribe(mutations: ["updateTaskRank", "updateTaskTask", "updateTaskDescription", "updateTaskDue", "updateTaskTags", "updateTaskPriority", "updateTaskStatus", "addAssignee", "removeAssignee", "addAnonymousAssignee", "removeAnonymousAssignee", "addInvitedAssignee", "removeInvitedAssignee", "addWatcher", "removeWatcher"]) @aws_cognito_user_pools @aws_iam
  onDeleteTaskByProjectId(projectId: ID!): DeletedTask @aws_subscribe(mutations: ["deleteTaskAndComments"]) @aws_cognito_user_pools @aws_iam
  onCreateCommentByTaskId(taskId: ID!): CreatedComment @aws_subscribe(mutations: ["createComment"]) @aws_cognito_user_pools @aws_iam
  onDeleteCommentByTaskId(taskId: ID!): DeletedComment @aws_subscribe(mutations: ["deleteComment"]) @aws_cognito_user_pools @aws_iam
}

input PushNotificationInput {
  id: ID!
  projectId: ID!
  taskId: ID
  commentId: ID
  action: HistoryAction!
  field: HistoryField!
  value: String
  hint: String
  read: Boolean!
  mutator: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String!
}

input PushUserUpdateInput {
  username: String!
  firstName: String!
  lastName: String!
  updatedAt: AWSDateTime!
}

input CreateProjectInput {
  id: ID!
  permalink: String!
  rank: Float!
  title: String!
  privacy: ProjectPrivacy!
  permissions: Permissions!
  statusSet: AWSJSON!
  defaultStatus: ID!
  mutationId: ID
}

input CreateTaskInput {
  id: ID!
  projectId: ID!
  rank: Float!
  task: String
  description: String
  due: AWSDateTime
  tags: [String!]!
  status: ID!
  priority: TaskPriority!
  mutationId: ID
}

input CreateCommentInput {
  id: ID!
  taskId: ID!
  content: String!
  mutationId: ID
}

input UpdateProjectInput {
  id: ID!
  permalink: String!
  rank: Float!
  title: String!
  privacy: ProjectPrivacy!
  permissions: Permissions!
  statusSet: AWSJSON!
  defaultStatus: ID!
  mutationId: ID
}

input UpdateProjectTitleInput {
  id: ID!
  title: String!
  mutationId: ID
}

input UpdateTaskRankInput {
  id: ID!
  rank: Float!
  mutationId: ID
}

input UpdateTaskTaskInput {
  id: ID!
  task: String
  mutationId: ID
}

input UpdateTaskDescriptionInput {
  id: ID!
  description: String
  mutationId: ID
}

input UpdateTaskDueInput {
  id: ID!
  due: AWSDateTime
  mutationId: ID
}

input UpdateTaskTagsInput {
  id: ID!
  tags: [String!]!
  mutationId: ID
}

input UpdateTaskStatusInput {
  id: ID!
  status: ID
  mutationId: ID
}

input UpdateTaskPriorityInput {
  id: ID!
  priority: TaskPriority
  mutationId: ID
}

input DeleteProjectInput {
  id: ID!
  mutationId: ID
}

input DeleteTaskInput {
  id: ID!
  mutationId: ID
}

input DeleteCommentInput {
  id: ID!
  mutationId: ID
}

input DismissNotificationInput {
  id: ID!
  mutationId: ID
}

input AddAssigneeInput {
  id: ID!
  assignee: String!
  mutationId: ID
}

input RemoveAssigneeInput {
  id: ID!
  assignee: String!
  mutationId: ID
}

input AddWatcherInput {
  id: ID!
  watcher: String!
  mutationId: ID
}

input RemoveWatcherInput {
  id: ID!
  watcher: String!
  mutationId: ID
}

input UpdateUserInput {
  username: String!
  firstName: String!
  lastName: String!
}

type UserUpdate @aws_iam @aws_cognito_user_pools {
  username: String!
  firstName: String!
  lastName: String!
  updatedAt: AWSDateTime!
}

type GotUser @aws_iam @aws_cognito_user_pools {
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type CreatedProject @aws_iam @aws_cognito_user_pools {
  id: ID!
  permalink: String!
  rank: Float!
  title: String!
  privacy: ProjectPrivacy!
  permissions: Permissions!
  statusSet: [Status!]!
  defaultStatus: ID!
  totalTasks: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String!
  mutationId: ID
}

type CreatedTask @aws_iam @aws_cognito_user_pools {
  id: ID!
  projectId: ID!
  permalink: Int!
  rank: Float!
  task: String
  description: String
  due: AWSDateTime
  tags: [String!]!
  status: ID!
  priority: TaskPriority!
  assignees: [String!]!
  watchers: [String!]!
  anonymousAssignees: [String!]!
  invitedAssignees: [String!]!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  mutationId: ID
}

type CreatedComment @aws_iam @aws_cognito_user_pools {
  id: ID!
  taskId: ID!
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String!
  mutationId: ID
}

type ProjectUpdate @aws_iam @aws_cognito_user_pools {
  id: ID!
  permalink: String!
  rank: Float!
  title: String!
  privacy: ProjectPrivacy!
  permissions: Permissions!
  statusSet: [Status!]!
  defaultStatus: ID!
  updatedAt: AWSDateTime!
  owner: String!
  mutationId: ID
}

type ProjectTitleUpdate @aws_iam @aws_cognito_user_pools {
  id: ID!
  title: String!
  updatedAt: AWSDateTime!
  owner: String!
  mutationId: ID
}

type TaskUpdate @aws_iam @aws_cognito_user_pools {
  id: ID!
  projectId: ID!
  action: HistoryAction!
  field: TaskUpdateField!
  value: String!
  updatedAt: AWSDateTime!
  mutationId: ID
}

type CommentUpdate @aws_iam @aws_cognito_user_pools {
  id: ID!
  taskId: ID!
  content: String!
  updatedAt: AWSDateTime!
  mutationId: ID
}

type DeletedProject @aws_iam @aws_cognito_user_pools {
  id: ID!
  updatedAt: AWSDateTime!
  owner: String!
  mutationId: ID
}

type DeletedTask @aws_iam @aws_cognito_user_pools {
  id: ID!
  projectId: ID!
  updatedAt: AWSDateTime!
  mutationId: ID
}

type DeletedComment @aws_iam @aws_cognito_user_pools {
  id: ID!
  taskId: ID!
  updatedAt: AWSDateTime!
  mutationId: ID
}

type DeletedNotification @aws_iam @aws_cognito_user_pools {
  id: ID!
  updatedAt: AWSDateTime!
  owner: String!
  mutationId: ID
}

type IndividualHistory @aws_iam @aws_cognito_user_pools {
  id: ID!
  action: HistoryAction!
  field: HistoryField!
  value: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String!
}

type InitializedUpload @aws_iam @aws_cognito_user_pools {
  presignedUrl: AWSURL!
}

type Empty @aws_iam @aws_cognito_user_pools {
  success: Boolean!
}

type Attachment @aws_iam @aws_cognito_user_pools {
  id: ID!
  filename: String!
  contentType: String!
  size: Int!
  url: AWSURL!
}

type AttachmentsList @aws_iam @aws_cognito_user_pools {
  items: [Attachment!]
}

type UsersList @aws_iam @aws_cognito_user_pools {
  items: [GotUser!]
}

type ProjectsList @aws_iam @aws_cognito_user_pools {
  items: [Project!]
}

type TasksList @aws_iam @aws_cognito_user_pools {
  items: [Task!]
}

type CommentsList @aws_iam @aws_cognito_user_pools {
  items: [Comment!]
}

type NotificationsList @aws_iam @aws_cognito_user_pools {
  items: [Notification!]
}

type IndividualHistoryList @aws_iam @aws_cognito_user_pools {
  items: [IndividualHistory!]
}

type GenericResult @aws_iam @aws_cognito_user_pools {
  result: String!
}

enum TaskPriority {
  high
  normal
  low
}

enum ProjectPrivacy {
  public
  private
}

enum Permissions {
  r
  rw
}

enum Plan {
  free
  pro
}

enum StatusSynonym {
  todo
  pending
  done
}

enum HistoryAction {
  create
  update
  delete
  append
  remove
}

enum HistoryField {
  comment
  due
  status
  priority
  assignees
  anonymousAssignees
  invitedAssignees
  watchers
}

enum TaskUpdateField {
  rank
  task
  description
  due
  tags
  status
  priority
  assignees
  anonymousAssignees
  invitedAssignees
  watchers
}
